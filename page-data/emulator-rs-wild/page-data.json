{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/emulator-rs-wild",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Wild RNG","description":"Wild RNG","isRoughDraft":true},"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"Wild RNG\",\n  \"description\": \"Wild RNG\",\n  \"slug\": \"emulator-rs-wild\",\n  \"subCategory\": \"Emulator\",\n  \"isRoughDraft\": true\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"You can copy on my FRLG guide for 90% of the part.\\nThis guide is BEFORE the update with Real's scripts\"), mdx(\"p\", null, \"This guide is to cover Fixed Initial Seed in Gen 3 aka RS dry and Emerald.\"), mdx(\"p\", null, \"You need :\"), mdx(\"p\", null, \"vba\\nLua scripts (noob or project pokemon one)\\nPokeFinder\"), mdx(\"p\", null, \"Open PokeFinder with the right profile and put the initial seed :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"0 for Emerald\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"5A0 for Ruby / Sapphire dry.\")), mdx(\"p\", null, \"Note : to have a dry ruby / sapphire just uncheck the real time clock in vba options.\"), mdx(\"p\", null, \"Find a target, go to the place and save.\"), mdx(\"p\", null, \"With PokeFinder (Gen 3 => Wild), just select the route and hit the criterias you want. For Ruby / Sapphire it's method H-1, for Emerald, it's method H-2 (you can still hit alternate spreads) once you've your target\"), mdx(\"p\", null, \"Launch vba, do REGULAR save states. Once close to your frame do a calibration :\"), mdx(\"p\", null, \"save state => note the frame you're on => encounter a pokemon with sweet scent => search that spread with pokefinder => do the math to find the delay and enter it in \\\"delay box\\\" => regenerate your target to have your new frame.\"), mdx(\"p\", null, \"Once done go to your target frame; you'll hit what you want.\"), mdx(\"p\", null, \"If not, just redo the calibration.\"), mdx(\"p\", null, \"/!\\\\ Example of a more short rough draft i'm planning to do /!\\\\\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"emulator-rs-wild"}},
    "staticQueryHashes": ["4168079547","884883011"]}