{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/misc-3ds-ips-luma-citra",
    "result": {"data":{"mdx":{"frontmatter":{"title":"Using IPS Patches with Luma and Citra","description":"Use game patches for instant text, no outlines, and extra fun","isRoughDraft":null},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Using IPS Patches with Luma and Citra\",\n  \"description\": \"Use game patches for instant text, no outlines, and extra fun\",\n  \"slug\": \"misc-3ds-ips-luma-citra\",\n  \"subCategory\": \"3DS\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"Using IPS files with Luma\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You will need Luma3DS installed on your 3DS for this.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Instructions for installing Luma3DS: \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://3ds.hacks.guide/\"\n  }, \"https://3ds.hacks.guide/\"))))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Find your game's title ID \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.3dsdb.com/\"\n  }, \"using 3dsdb\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Put your code.ips patch at \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"/luma/titles/_title ID_/code.ips\"))), mdx(\"p\", null, \"For example, Ultra Moon would be \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"/luma/title/00040000001B5100/code.ips\")), mdx(\"h2\", null, \"Using IPS files with Citra\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Right click on your game in Citra\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Open the update directory\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Make a new folder called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"_your .app file_.exefsdir\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"For example, Ultra Moon's update would be \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"00000001.app.exefsdir\")))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Put the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"code.ips\"), \" in the new folder\")), mdx(\"h2\", null, \"Merging patches with IPSPatcher.js\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Note: Some IPS patches use a feature called 'RLE' where one byte is repeated multiple times.  This method does not support RLE.\\n\")), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Download any IPS files you want to apply\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Go to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://zaksabeast.github.io/ipspatcher.js/build/\"\n  }, \"the IPSPatcher.js site\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click the \\\"Merge\\\" button\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Select every IPS patch you want to apply\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Click \\\"Open\\\" or \\\"Upload\\\" (depending on your browser)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A file called \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"merged.ips\"), \" will be downloaded\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Rename the downloaded \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"merged.ips\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"code.ips\"))));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"slug":"misc-3ds-ips-luma-citra"}},
    "staticQueryHashes": ["4168079547","884883011"]}